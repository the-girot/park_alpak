import re
from datetime import datetime, timedelta

from .cron_parser import CronParser


class DAG:
    def __init__(self, dag_id, schedule_interval=None):
        self.dag_id = dag_id
        self.schedule_interval = schedule_interval
        self.tasks = []
        self.last_run = None
        self.next_run = None  # –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        self.cron_schedule = None

        if schedule_interval and self._is_cron_string(schedule_interval):
            try:
                self.cron_schedule = CronParser.parse(schedule_interval)
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                self.next_run = self._calculate_next_run(datetime.now())
                print(f"‚úÖ DAG {dag_id} —Å–æ–∑–¥–∞–Ω. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {self.next_run}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cron: {e}")

    def _is_cron_string(self, schedule_str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º"""
        if not isinstance(schedule_str, str):
            return False
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 5-—Ç–∏ –∏ 6-—Ç–∏ –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (—Å —Å–µ–∫—É–Ω–¥–∞–º–∏)
        parts = schedule_str.strip().split()
        return len(parts) in [5, 6] and all(self._is_cron_part(part) for part in parts)

    def _is_cron_part(self, part):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å—Ç–∏ cron-–≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        cron_pattern = r"^(\*|\d+(-\d+)?(,\d+(-\d+)?)*|(\*\/\d+))$"
        return bool(re.match(cron_pattern, part))

    def task(self, func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ DAG"""
        self.tasks.append(func)
        return func

    def _calculate_next_run(self, current_time):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ cron-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if not self.cron_schedule:
            return None

        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –º–∏–Ω—É—Ç—ã + 1 —Å–µ–∫—É–Ω–¥–∞ (—á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å—Ä–∞–∑—É –∂–µ)
        next_time = current_time.replace(microsecond=0) + timedelta(seconds=1)

        max_iterations = 10000  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        iterations = 0

        while iterations < max_iterations:
            iterations += 1

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ –∫–∞–Ω–¥–∏–¥–∞—Ç-–≤—Ä–µ–º—è
            if self._time_matches_cron(next_time):
                # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
                if next_time > current_time:
                    return next_time
                else:
                    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–æ—à–ª–æ–º, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
                    next_time += timedelta(minutes=1)
                    continue

            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç–µ
            next_time += timedelta(minutes=1)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
            next_time = next_time.replace(second=0)

        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è DAG {self.dag_id}")
        return None

    def _time_matches_cron(self, time):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Ä–µ–º—è cron-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        if not self.cron_schedule:
            return False

        return (
            time.second in self.cron_schedule.get("second", [0])
            and time.minute in self.cron_schedule["minute"]
            and time.hour in self.cron_schedule["hour"]
            and time.day in self.cron_schedule["day"]
            and time.month in self.cron_schedule["month"]
            and time.weekday() in self.cron_schedule["day_of_week"]
        )

    def _get_next_run_simple(self, current_time):
        """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        if not self.cron_schedule:
            return None

        # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        next_time = current_time.replace(microsecond=0)

        while True:
            next_time += timedelta(minutes=1)
            next_time = next_time.replace(second=0)

            if self._time_matches_cron(next_time):
                return next_time

    def should_run(self, current_time):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å DAG –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –î–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if self.schedule_interval == "once":
            if self.last_run is None:
                self.next_run = current_time
                return True
            return False

        # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        elif self.schedule_interval == "daily":
            if self.last_run is None:
                self.next_run = current_time.replace(
                    hour=0, minute=0, second=0, microsecond=0
                )
                if self.next_run <= current_time:
                    self.next_run += timedelta(days=1)
                return True
            next_day = self.last_run.replace(
                hour=0, minute=0, second=0, microsecond=0
            ) + timedelta(days=1)
            if current_time >= next_day:
                self.next_run = next_day
                return True
            return False

        # –î–ª—è –µ–∂–µ—á–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        elif self.schedule_interval == "hourly":
            if self.last_run is None:
                self.next_run = current_time.replace(minute=0, second=0, microsecond=0)
                if self.next_run <= current_time:
                    self.next_run += timedelta(hours=1)
                return True
            next_hour = self.last_run.replace(
                minute=0, second=0, microsecond=0
            ) + timedelta(hours=1)
            if current_time >= next_hour:
                self.next_run = next_hour
                return True
            return False

        # –î–ª—è cron-—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        elif self.cron_schedule:
            # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–æ
            if self.next_run is None:
                self.next_run = self._calculate_next_run(current_time)
                return False

            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è >= —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ, –∑–∞–ø—É—Å–∫–∞–µ–º
            if current_time >= self.next_run:
                return True

        return False

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á DAG —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.now()
        print(f"üöÄ –ó–∞–ø—É—Å–∫ DAG: {self.dag_id} –≤ {current_time}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        self.last_run = current_time

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        if self.cron_schedule:
            old_next_run = self.next_run
            self.next_run = self._calculate_next_run(current_time)
            print(
                f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ DAG {self.dag_id}: {self.next_run} (–±—ã–ª–æ: {old_next_run})"
            )
        elif self.schedule_interval in ["daily", "hourly"]:
            print(f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ DAG {self.dag_id}: {self.next_run}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á–∏
        success_count = 0
        error_count = 0

        for task in self.tasks:
            try:
                start_time = datetime.now()
                result = task()
                execution_time = (datetime.now() - start_time).total_seconds()

                print(
                    f"‚úÖ –ó–∞–¥–∞—á–∞ {task.__name__} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {execution_time:.2f}—Å"
                )
                if result is not None:
                    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                success_count += 1

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ {task.__name__}: {e}")
                error_count += 1

        # –ò—Ç–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if error_count == 0 else "‚ö†Ô∏è  –° –û–®–ò–ë–ö–ê–ú–ò"
        print(
            f"üéØ DAG {self.dag_id} –∑–∞–≤–µ—Ä—à–µ–Ω {status}. "
            f"–ó–∞–¥–∞—á–∏: {success_count}‚úÖ {error_count}‚ùå"
        )

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å DAG –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        status = {
            "dag_id": self.dag_id,
            "schedule_interval": self.schedule_interval,
            "last_run": self.last_run.isoformat() if self.last_run else "–ù–∏–∫–æ–≥–¥–∞",
            "next_run": self.next_run.isoformat()
            if self.next_run
            else "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω",
            "tasks_count": len(self.tasks),
            "cron_schedule": self.cron_schedule,
        }
        return status

    def __str__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ DAG"""
        last_run_str = (
            self.last_run.strftime("%Y-%m-%d %H:%M:%S") if self.last_run else "–ù–∏–∫–æ–≥–¥–∞"
        )
        next_run_str = (
            self.next_run.strftime("%Y-%m-%d %H:%M:%S")
            if self.next_run
            else "–ù–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
        )

        return (
            f"DAG('{self.dag_id}', schedule='{self.schedule_interval}', "
            f"last_run={last_run_str}, next_run={next_run_str}, "
            f"tasks={len(self.tasks)})"
        )
