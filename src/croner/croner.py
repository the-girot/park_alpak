import gc
import importlib.util
import threading
import time
import tracemalloc
import weakref
from datetime import datetime
from pathlib import Path

import psutil

from .dag import DAG


class Croner:
    def __init__(self, dags_folder="./dags"):
        self.dags_folder = Path(dags_folder)
        self.dags = {}  # –ú–æ–∂–µ—Ç –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è
        self.running = False
        self.active_threads = weakref.WeakSet()  # –°–ª–µ–¥–∏–º –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
        self.last_cleanup = datetime.now()
        self.memory_usage_log = []

        # –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏
        tracemalloc.start()

    def load_dag_from_file(self, file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç DAG –∏–∑ Python —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª
            dag_key = str(file_path)
            current_mtime = file_path.stat().st_mtime

            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DAG –ø–æ file_path (–∞ –Ω–µ –ø–æ dag_key)
            existing_dag_id = None
            for dag_id, dag_info in self.dags.items():
                if dag_info["file_path"] == dag_key:
                    existing_dag_id = dag_id
                    break

            # –ï—Å–ª–∏ —Ñ–∞–π–ª –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ DAG –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
            if existing_dag_id is None:
                print(f"üÜï –ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π DAG —Ñ–∞–π–ª: {file_path}")
            elif current_mtime > self.dags[existing_dag_id].get("mtime", 0):
                print(f"üîÑ –§–∞–π–ª {file_path} –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º DAG")
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π DAG
                del self.dags[existing_dag_id]
            else:
                # –§–∞–π–ª –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                return []

            spec = importlib.util.spec_from_file_location(
                f"dag_module_{file_path.stem}", file_path
            )
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)

            loaded_dags = []
            for attr_name in dir(module):
                attr = getattr(module, attr_name)
                if isinstance(attr, DAG):
                    dag_id = f"{file_path.stem}_{attr_name}"
                    self.dags[dag_id] = {
                        "dag": attr,
                        "mtime": current_mtime,
                        "file_path": dag_key,
                        "loaded_at": datetime.now(),
                    }
                    loaded_dags.append(dag_id)
                    print(
                        f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω DAG: {dag_id} —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º: {attr.schedule_interval}"
                    )

            # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥—É–ª—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫
            del module
            del spec

            return loaded_dags

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ DAG –∏–∑ {file_path}: {e}")
            return []

    def unload_dag(self, dag_id):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç DAG –∏–∑ –ø–∞–º—è—Ç–∏"""
        if dag_id in self.dags:
            print(f"–í—ã–≥—Ä—É–∂–∞–µ–º DAG: {dag_id}")
            del self.dags[dag_id]
            return True
        return False

    def cleanup_old_dags(self):
        """–û—á–∏—â–∞–µ—Ç DAG, —Ñ–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã"""
        current_files = {
            str(p) for p in self.dags_folder.glob("*.py") if not p.name.startswith("_")
        }

        dags_to_remove = []
        for dag_id, dag_info in self.dags.items():
            if dag_info["file_path"] not in current_files:
                dags_to_remove.append(dag_id)

        for dag_id in dags_to_remove:
            self.unload_dag(dag_id)

        if dags_to_remove:
            print(f"–£–¥–∞–ª–µ–Ω—ã DAG: {dags_to_remove}")

    def scan_dags_folder(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–∞–ø–∫—É —Å DAG –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏"""
        if not self.dags_folder.exists():
            self.dags_folder.mkdir(parents=True)
            print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è DAG: {self.dags_folder}")
            return

        # –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ DAG
        self.cleanup_old_dags()

        for file_path in self.dags_folder.glob("*.py"):
            if file_path.name.startswith("_"):
                continue

            dag_key = str(file_path)
            if dag_key not in [info["file_path"] for info in self.dags.values()]:
                print(f"–ù–∞–π–¥–µ–Ω –Ω–æ–≤—ã–π DAG —Ñ–∞–π–ª: {file_path}")
                self.load_dag_from_file(file_path)

    def run_dag_in_thread(self, dag_id, dag: DAG):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç DAG –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            print(f"–ó–∞–ø—É—Å–∫ DAG: {dag_id}")
            dag.run()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ DAG {dag_id}: {e}")
        finally:
            # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–æ–∫ –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
            if threading.current_thread() in self.active_threads:
                self.active_threads.remove(threading.current_thread())

    def run_scheduled_dags(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç DAG –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞"""
        current_time = datetime.now()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è DAG
        active_count = sum(1 for t in self.active_threads if t.is_alive())
        max_concurrent = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö DAG

        for dag_id, dag_info in self.dags.items():
            dag: DAG = dag_info["dag"]

            if active_count >= max_concurrent:
                print(
                    f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö DAG ({max_concurrent}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {dag_id}"
                )
                continue
            if dag.should_run(current_time):
                print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∑–∞–ø—É—Å–∫ DAG: {dag_id}")
                thread = threading.Thread(
                    target=self.run_dag_in_thread, args=(dag_id, dag), daemon=True
                )
                self.active_threads.add(thread)
                thread.start()
                active_count += 1

    def monitor_memory_usage(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        process = psutil.Process()
        memory_mb = process.memory_info().rss / 1024 / 1024

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        self.memory_usage_log.append(
            {
                "timestamp": datetime.now(),
                "memory_mb": memory_mb,
                "active_dags": len(self.dags),
                "active_threads": sum(1 for t in self.active_threads if t.is_alive()),
            }
        )

        # –î–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
        if len(self.memory_usage_log) > 100:
            self.memory_usage_log.pop(0)

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
        if memory_mb > 500:  # 500 MB
            print(f"‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_mb:.2f} MB")

        return memory_mb

    def force_garbage_collection(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞"""
        collected = gc.collect()
        print(f"–°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞: –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ {collected} –æ–±—ä–µ–∫—Ç–æ–≤")

    def periodic_cleanup(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        current_time = datetime.now()

        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        if (current_time - self.last_cleanup).total_seconds() > 600:
            print("–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É...")

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            self.force_garbage_collection()

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏
            memory_usage = self.monitor_memory_usage()
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage:.2f} MB")
            print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö DAG: {len(self.dags)}")
            print(
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {sum(1 for t in self.active_threads if t.is_alive())}"
            )

            self.last_cleanup = current_time

    def start_scheduler(self, scan_interval=30):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏"""

        def scheduler_loop():
            while self.running:
                try:
                    self.scan_dags_folder()
                    self.run_scheduled_dags()
                    self.periodic_cleanup()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(scan_interval)

        self.running = True
        scheduler_thread = threading.Thread(target=scheduler_loop, daemon=True)
        scheduler_thread.start()
        print(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ {scan_interval} —Å–µ–∫—É–Ω–¥")

    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        self.running = False
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫...")

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        timeout = 30
        start_time = time.time()

        active_threads = [t for t in self.active_threads if t.is_alive()]
        if active_threads:
            print(f"–û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(active_threads)} –∞–∫—Ç–∏–≤–Ω—ã—Ö DAG...")
            for thread in active_threads:
                thread.join(timeout=timeout - (time.time() - start_time))

        # –û—á–∏—â–∞–µ–º –≤—Å–µ DAG
        self.dags.clear()
        self.active_threads.clear()

        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        self.force_garbage_collection()

        print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_memory_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        if not self.memory_usage_log:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏"

        current = self.memory_usage_log[-1]
        return (
            f"–ü–∞–º—è—Ç—å: {current['memory_mb']:.2f} MB, "
            f"DAG: {current['active_dags']}, "
            f"–ü–æ—Ç–æ–∫–∏: {current['active_threads']}"
        )
